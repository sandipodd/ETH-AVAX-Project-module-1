// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract RequireAssertRevertExample {
    address public owner;
    uint public value;

    constructor() {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }

    // Function to update the value, only accessible by the contract owner
    function updateValue(uint newValue) public onlyOwner {
        value = newValue;
    }

    // Function to demonstrate the usage of assert()
    function assertExample(uint a, uint b) public pure returns (uint) {
        uint result = a + b;
        assert(result >= a && result >= b); // Ensuring no overflow occurs
        return result;
    }

    // Function to demonstrate the usage of revert()
    function divide(uint _numerator, uint _denominator) public pure returns (uint) {
        require(_denominator != 0, "Denominator cannot be zero");
        require(_numerator >= _denominator, "Numerator must be greater than or equal to the denominator");
        return _numerator / _denominator;
    }
    
    // Function to demonstrate custom error message with revert
    function divideWithCustomError(uint _numerator, uint _denominator) public pure returns (uint) {
        require(_denominator != 0, "Denominator cannot be zero");
        require(_numerator >= _denominator, "Numerator must be greater than or equal to the denominator");
        
        if (_numerator < _denominator) {
            revert("Numerator must be greater than the denominator");
        }
        
        return _numerator / _denominator;
    }
}

